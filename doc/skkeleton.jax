*skkeleton.txt* 日本語入力システム

Author: kuuote
License: zlib

==============================================================================
INTRODUCTION                                          *skkeleton-introduction*

*skkeleton* は |denops.vim| を利用したSKK環境を提供します。

REQUIRED                                                  *skkeleton-required*

基本的に作者が最新のVimを利用しているため古いバージョンのVimでの動作は
保証しませんが、テストはVim v9.0.0449 Neovim 0.8.0 以降で動かしているので
それ以降であれば動くと思います。
他の条件は|denops.vim|に準拠します。

==============================================================================
INTERFACE                                                *skkeleton-interface*

------------------------------------------------------------------------------
HOOKS                                                        *skkeleton-hooks*

Vimのautocmd機能によるフック機能を提供しています。
`autocmd User skkeleton-enable-pre echo "enable pre"`
のように呼び出せます。

skkeleton-initialize-pre                            *skkeleton-initialize-pre*

        skkeletonが最初に有効化された際に実行されます。
        |denops.vim|のランタイムはVimと独立して再起動する場合があり、設定も
        消えてしまいますが、その場合はもう一度このフックも実行されるので
        こちらのフックを利用して設定を行うことをおすすめします。
>
    " 例
    function! s:skkeleton_init() abort
      call skkeleton#config({
        \ 'eggLikeNewline': v:true
        \ })
      call skkeleton#register_kanatable('rom', {
        \ "z\<Space>": ["\u3000", ''],
        \ })
    endfunction
    augroup skkeleton-initialize-pre
      autocmd!
      autocmd User skkeleton-initialize-pre call s:skkeleton_init()
    augroup END
<
skkeleton-initialize-post                          *skkeleton-initialize-post*

        skkeletonが最初に有効化された後に実行されます。

skkeleton-disable-pre                                  *skkeleton-disable-pre*

        skkeletonが無効化される前に毎回実行されます。

skkeleton-disable-post                                *skkeleton-disable-post*

        skkeletonが無効化された後に毎回実行されます。

skkeleton-enable-pre                                    *skkeleton-enable-pre*

        skkeletonが有効化される前に毎回実行されます。

skkeleton-enable-post                                  *skkeleton-enable-post*

        skkeletonが有効化された後に毎回実行されます。

skkeleton-mode-changed                                *skkeleton-mode-changed*

        モードが切り替わった際に呼び出されます。
        呼び出しの際は `g:skkeleton#mode` に |skkeleton#mode()| の結果と
        同じ物が代入されます。
>
    " 例
    augroup skkeleton-mode-changed
      autocmd!
      autocmd User skkeleton-mode-changed redrawstatus
    augroup END
<
skkeleton-handled                                          *skkeleton-handled*

        入力がハンドリングされた後に呼び出されます。
        呼び出しの前に|g:skkeleton#state|に状態が代入されます。

------------------------------------------------------------------------------
KEYMAPPINGS                                            *skkeleton-keymappings*

各マッピングはskkeleton有効時は直接入力モードでのみ使用できます。

<Plug>(skkeleton-enable) (ic)                       *<Plug>(skkeleton-enable)*

        skkeletonを有効化します。  >

    " 例
    imap <C-j> <Plug>(skkeleton-enable)
    cmap <C-j> <Plug>(skkeleton-enable)
    tmap <C-j> <Plug>(skkeleton-enable)
<

<Plug>(skkeleton-disable) (ic)                       *<Plug>(skkeleton-disable)*

        skkeletonを無効化します。  >

    " 例
    imap <C-j> <Plug>(skkeleton-disable)
    cmap <C-j> <Plug>(skkeleton-disable)
    tmap <C-j> <Plug>(skkeleton-disable)
<

<Plug>(skkeleton-toggle) (ic)                       *<Plug>(skkeleton-toggle)*

        skkeletonの有効、無効を切り替えます。  >

    " 例
    imap <C-j> <Plug>(skkeleton-toggle)
    cmap <C-j> <Plug>(skkeleton-toggle)
    tmap <C-j> <Plug>(skkeleton-toggle)
<
有効時のマッピングは以下の通りです。
こちらの定義は|skkeleton#register_keymap()|で変更できます

input:
        <BS>      : |skkeleton-functions-deleteChar|
        <C-g>     : |skkeleton-functions-cancel|
        <C-h>     : |skkeleton-functions-deleteChar|
        <C-q>     : |skkeleton-functions-hankatakana|
        <CR>      : |skkeleton-functions-newline|
        <Esc>     : |skkeleton-functions-escape|
        <NL>      : |skkeleton-functions-kakutei|
henkan:
        <C-g>     : |skkeleton-functions-cancel|
        <CR>      : |skkeleton-functions-newline|
        <NL>      : |skkeleton-functions-kakutei|
        <Space>   : |skkeleton-functions-henkanForward|
        X         : |skkeleton-function-purgeCandidate|
        x         : |skkeleton-function-henkanBackward|

------------------------------------------------------------------------------
API                                                            *skkeleton-api*

skkeleton#initialize()                                *skkeleton#initialize()*

        skkeletonを手動で初期化します。辞書のロードも行います。

skkeleton#is_enabled()                                *skkeleton#is_enabled()*

        skkeletonが有効化されているかどうかを返します。

skkeleton#mode()                                            *skkeleton#mode()*

        現在のモードを以下のように返します。
        無効化されている場合は空文字を返します。

                "hira":    ひらがな
                "kata":    カタカナ
                "hankata": 半角カタカナ
                "zenkaku": 全角英数
                "abbrev":  abbrev

g:skkeleton#state                                          *g:skkeleton#state*

        最後にハンドリングが実行された際の状態から生成される値です。
        以下の内容から構成されます

                phase: 入力の段階
                    "input"            直接入力
                    "input:okurinasi"  送りなし入力
                    "input:okuriari"   送りあり入力
                    "henkan"           変換

------------------------------------------------------------------------------
CONFIG                                                      *skkeleton-config*

skkeleton#config(dict)                                    *skkeleton#config()*

        以下に示すキー(省略可能)から成る辞書を渡すことで設定を変更できます。
        一部の設定(現時点では辞書関係)は初回起動前に渡す必要があります。
        パスに関しては、ホームディレクトリを示す `~` のみVimの|expand()|と
        同じ方法で展開されます。
>
    " 例
    call skkeleton#config({
      \ 'eggLikeNewline': v:true
      \ })
<
acceptIllegalResult                     *skkeleton-config-acceptIllegalResult*
        (デフォルト v:false)
        このオプションを有効にすると、Microsoft IME等と同様に
        入力に失敗したローマ字がバッファに残るようになります。

completionRankFile                       *skkeleton-config-completionRankFile*
        (デフォルト "")
        パスを指定すると補完候補の順番を記録するようになります。

debug                                                 *skkeleton-config-debug*
        (デフォルト v:false, g:skkeleton#debug が真の場合は v:true)
        このオプションを有効にするとデバッグログが出力されるようになります。

eggLikeNewline                               *skkeleton-config-eggLikeNewline*
        (デフォルト v:false)
        このオプションを有効にすると
        変換モードで改行キーを押した際に確定のみ行います。

globalDictionaries                       *skkeleton-config-globalDictionaries*
        (デフォルト [])
        複数のグローバル辞書を使用する際に指定するオプションです。
        指定する値はグローバル辞書のパスまたは
        パスとエンコーディングからなるタプルの配列になります。
        エンコーディングを指定しない場合は自動判定されます。
        圧縮された辞書をそのまま使う機能はないため
        辞書が圧縮されている場合は展開する必要があります。
>
    値の例: [["/usr/share/skk/SKK-JISYO.L", "euc-jp"],
             "~/.skk/SKK-JISYO.emoji"]
<

globalJisyo                                     *skkeleton-config-globalJisyo*
        (デフォルト "/usr/share/skk/SKK-JISYO.L")
        グローバル辞書のパス
        圧縮された辞書をそのまま使う機能はないため
        辞書が圧縮されている場合は展開する必要があります。
        互換性のために残しています。globalDictionariesが指定されていた場合は
        無視されます。

globalJisyoEncoding                     *skkeleton-config-globalJisyoEncoding*
        (デフォルト "euc-jp")
        グローバル辞書のエンコーディング
        SKK Openlab以外が配布している辞書を使う場合などは
        変更する必要があるかもしれません。
        互換性のために残しています。globalDictionariesが指定されていた場合は
        無視されます。

immediatelyCancel                         *skkeleton-config-immediatelyCancel*
        (デフォルト v:true)
        このオプションを有効にすると
        変換候補選択などで |skkeleton-functions-cancel| を使った際に
        一気に未入力状態に戻るようになります。

immediatelyJisyoRW                       *skkeleton-config-immediatelyJisyoRW*
        (デフォルト v:true)
        このオプションを有効にすると
        変換や確定の度にユーザー辞書を読み書きするようになります。
        複数のVimインスタンスを同時に使う場合に有用かもしれません。

immediatelyOkuriConvert             *skkeleton-config-immediatelyOkuriConvert*
        (デフォルト v:true)
        有効にすると、送りあり変換時に直接「っ」を打った時点で
        タ行の送り仮名が打たれたと判断し変換を開始します。
        Note: ローマ時入力で連続入力で「っ」を入力する場合など、続く文字が
              入力される場合には影響しません。
        Note: 機能追加に際しタ行決め打ちにする根拠を調査して頂いたので
              載せておきます。
              https://blog.atusy.net/2023/08/01/skk-azik-and-sokuon-okuri/

kanaTable                                         *skkeleton-config-kanaTable*
        (デフォルト "rom")
        使用する仮名テーブルを指定します。
        存在するテーブルのみ指定できます。存在しないテーブルを指定したい場合は
        |skkeleton#register_kanatable()| で先にテーブルを作成してください。

globalKanaTableFiles                    *skkeleton-config-globalKanaTableFiles*
        (デフォルト [])
        複数のカナ変換テーブルを使用する際に指定するオプションです。
        指定する値はグローバル辞書のパスまたは
        パスとエンコーディングからなるタプルの配列になります。
        エンコーディングを指定しない場合は自動判定されます。
>
    値の例: [["/usr/share/skk/azik_us.rule, "euc-jp"]]
<
keepState                                         *skkeleton-config-keepState*
        (デフォルト v:false)
        このオプションを有効にすると
        Insertモードを抜けても前回の状態を保持するようになります。

markerHenkan                                   *skkeleton-config-markerHenkan*
        (デフォルト "▽")
        変換入力中であることを示すため文字を指定します。

markerHenkanSelect                       *skkeleton-config-markerHenkanSelect*
        (デフォルト "▼")
        候補を選択している最中であることを示すため文字を指定します。

registerConvertResult                 *skkeleton-config-registerConvertResult*
        (デフォルト v:false)
        このオプションを有効にすると
        カタカナ変換等の結果を辞書に登録するようになります。
        補完機能を使っている場合などに便利だと思います。

selectCandidateKeys                     *skkeleton-config-selectCandidateKeys*
        (デフォルト "asdfjkl")
        候補を選択する際に使用するキーを指定します。
        x以外の半角英字7文字が使用できます。

setUndoPoint                                   *skkeleton-config-setUndoPoint*
        (デフォルト v:true)
        このオプションを有効にすると
        変換や確定が行われる際にアンドゥポイントを切るようになります。

showCandidatesCount                     *skkeleton-config-showCandidatesCount*
        (デフォルト 4)
        このオプションの数の候補までは選択表示がされずに変換されます。

skkServerHost                   *skkeleton-config-skkServerHost*
        (デフォルト "127.0.0.1")
        辞書サーバーのホスト名またはIPアドレスを指定します。

skkServerPort                   *skkeleton-config-skkServerPort*
        (デフォルト 1178)
        辞書サーバーのポート番号を指定します。

skkServerReqEnc                 *skkeleton-config-skkServerReqEnc*
        （デフォルト "euc-jp"）
        辞書サーバーに渡す文字列のエンコード形式を指定します。

skkServerResEnc                 *skkeleton-config-skkServerResEnc*
        （デフォルト "euc-jp"）
        辞書サーバーから受け取る文字列のエンコード形式を指定します。

usePopup                                           *skkeleton-config-usePopup*
        (デフォルト v:true)
        このオプションを有効にすると、変換候補がポップアップ表示されます。

useSkkServer                              *skkeleton-config-useSkkServer*
        (デフォルト v:false)
        辞書サーバー機能を有効にします。

userJisyo                                     *skkeleton-config-userJisyo*
        (デフォルト "~/.skkeleton")
        ユーザー辞書のパス
        JavaScriptの制約によりエンコーディングはUTF-8限定になります。

------------------------------------------------------------------------------
                                              *skkeleton#register_kanatable()*
skkeleton#register_kanatable({tableName}, {table}, {create})
        仮名入力のテーブルを登録できます。
        {tableName}で指定したテーブルに{table}で指定した辞書の定義が登録されま
        す。{create}が指定されていない場合は存在しないテーブル名を指定すると
        エラーになります。
        {table}の要素には以下の物が使用できます:
                文字列:
                        |skkeleton-functions| に示される機能を割り当てます。
                1要素あるいは2要素の文字列から成る配列:
                        仮名定義を割り当てます。
                        1番目の要素は入力される仮名を示します。
                        2番目の要素は仮名が入力される際に追加で入力される
                        文字を示します。省略すると空文字列になります。
                        (ttで「っ」を入力する際などに使用されます)
>
    " 例
    call skkeleton#register_kanatable('rom', {
          \ 'hh': ['お', 'h'],
          \ 'jj': 'escape',
          \ 'z,': ['―'],
          \ })
    " ヘボン式入力
    call skkeleton#register_kanatable('rom', {
          \   'mb': ['ん', 'b'],
          \   'mm': ['ん', 'm'],
          \   'mp': ['ん', 'p'],
          \   'tch': ['っ', 'ch'],
          \ })
    " 句読点を全角英字に変える
    call skkeleton#register_kanatable('rom', {
          \   ',': ['，', ''],
          \   '.': ['．', ''],
          \ })
<
                                                 *skkeleton#register_keymap()*
skkeleton#register_keymap({state}, {key}, {funcName})
        ステート単位のキーマップを定義します。
        {state}で指定したステートの{key}に{funcName}で指定した機能が
        |skkeleton-functions| より割り当てられます。
        {funcName}に |falsy| な値を指定するとマッピングを削除します。

        {state}は以下の物が指定できます:
                input
                henkan
>
    " 例: 変換モードでxを<BS>に移動します
    call skkeleton#register_keymap('henkan', "\<BS>", 'henkanBackward')
    call skkeleton#register_keymap('henkan', "x", '')
<
------------------------------------------------------------------------------
                                                     *g:skkeleton#mapped_keys*
g:skkeleton#mapped_keys
        (デフォルト `skkeleton#get_default_mapped_keys()`の返値)
        skkeletonにマッピングするキーの配列です。ここにキーを追加すると
        |skkeleton#register_keymap()|で指定できるようになります。
>
    " 例: <C-l>で全角モードに入れるようにします
    call add(g:skkeleton#mapped_keys, '<C-l>')
    call skkeleton#register_keymap('input', '<C-l>', 'zenkaku')

==============================================================================
COMPLETION                                              *skkeleton-completion*

    |ddc|と連携した補完環境を提供します。
    送りなし変換の仮名入力時に動作し、入力された仮名で始まる候補を表示します。
    候補の順番は|skkeleton-config-completionRankFile|で指定したファイルに
    保存できます。
>
    " 例
    call ddc#custom#patch_global('sources', ['skkeleton'])
    call ddc#custom#patch_global('sourceOptions', {
        \   '_': {
        \     'matchers': ['matcher_head'],
        \     'sorters': ['sorter_rank']
        \   },
        \   'skkeleton': {
        \     'mark': 'skkeleton',
        \     'matchers': ['skkeleton'],
        \     'sorters': [],
        \     'isVolatile': v:true,
        \   },
        \ })
    call skkeleton#config({'completionRankFile': '~/.skkeleton/rank.json'})
<
==============================================================================
FAQ                                                            *skkeleton-faq*

変換ができない~

変換を行うにはSKK用の辞書のダウンロード及びパスの設定が必要になります。
https://skk-dev.github.io/dict/ で管理されているL辞書をダウンロードして
展開するのをおすすめします。
展開後は|skkeleton-config-globalJisyo|に展開したパスの指定をしてください。

skkeleton のロード処理が遅い~

デフォルトでは初回利用時にロードしますが、その間Vimをブロックしてしまいます。
|skkeleton#initialize()| で明示的に初期化するようにしてください。

変換ポイントの描画が乱れる~

SKKではデフォルトで変換ポイントとして逆三角形を使いますが、この文字は
|'ambiwidth'|の対象になっています。
そのためVimとターミナルやフォントの設定がずれていると描画が乱れます。
|'ambiwidth'|の設定を変更するか|skkeleton-config-markerHenkan|及び
|skkeleton-config-markerHenkanSelect|を|'ambiwidth'|の対象外に
変更してみてください。

プラグインと干渉する~

skkeletonを有効化、無効化する際にフックが使えますので
プラグイン側で一時的に機能を無効化するという方法があります。
>
    " coc.nvimの例
    augroup skkeleton-coc
      autocmd!
      autocmd User skkeleton-enable-pre let b:coc_suggest_disable = v:true
      autocmd User skkeleton-disable-pre let b:coc_suggest_disable = v:false
    augroup END
<
sticky keyの挙動をeskk.vimに合わせる~

|eskk.vim|ではsticky keyを使用している際に「察し」を「;sass;i」で入力できます。
しかしskkeletonではsticky keyを仮名テーブルに配置しているため「;sass;si」と
入力しないといけなくなっています。以下の設定を記述すると挙動を前者に寄せられ
ます。

>
    call skkeleton#register_keymap('input', ';', 'henkanPoint')
<

Vim の端末モードで漢字変換ができない~

Vim は |:terminal| の挙動が異なるので漢字の変換をサポートしていません。neovim
は動作します。

==============================================================================
CHANGELOG                                                *skkeleton-changelog*

2023-08-01~
- `immediatelyOkuriConvert`オプションを追加
  - 直接かな入力を使っている場合などにデフォルトで発動するようになっています

2023-07-11~
- ローマ字テーブルに `z<Space>` を全角スペースにするルールを追加

2023-07-10~
- ターミナルモードで動作するようにした(thanks @Shougo)

2023-06-23~
- 状態取得のために|g:skkeleton#state|を追加した

2023-06-17~
- 伸ばし棒が半角カナの変換対象になっていなかったので修正

2023-03-05~
- ローマ字入力時に`z(`及び`z)`が使えなかったので修正

2023-02-18~
- 補完で入力が1文字の場合に完全一致した候補を出すようにした

2023-01-24~
- 有効化直後のモード切り替えイベントでモードの取得ができていなかった

2023-01-21~
- ロジックの問題により<Enter>表記の使用を禁止

2022-04-25~
- 補完ハンドリングの修正
  - キーを奪うのをやめた
- tabCompletionオプションの削除

2022-03-27~
- |skkeleton#register_kanatable()|の一部要素を省略可能にした

2022-03-24~
- abbrevモードを追加

2022-02-28~
- カタカナ変換などの際に送り仮名がひらがなになっていたので修正

2022-02-27~
- |skkeleton-config-completionRankFile|オプションの追加

vim:tw=78:fo=tcq2mM:ts=8:ft=help:norl
